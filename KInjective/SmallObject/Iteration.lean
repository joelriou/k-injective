import KInjective.SmallObject.WellOrderContinuous
import Mathlib.CategoryTheory.Limits.FunctorCategory

universe u

lemma monotone_inclusion_lt_le_of_le {Œ± : Type*} [Preorder Œ±] {k j : Œ±} (hkj : k ‚â§ j) :
    Monotone (fun ‚ü®i, hi‚ü© => ‚ü®i, hi.le.trans hkj‚ü© : { i | i < k } ‚Üí { i | i ‚â§ j}) :=
  fun _ _ h => h

lemma monotone_inclusion_le_le_of_le {Œ± : Type*} [Preorder Œ±] {k j : Œ±} (hkj : k ‚â§ j) :
    Monotone (fun ‚ü®i, hi‚ü© => ‚ü®i, hi.trans hkj‚ü© : { i | i ‚â§ k } ‚Üí { i | i ‚â§ j}) :=
  fun _ _ h => h

namespace CategoryTheory

open Category Limits

variable {C : Type*} [Category C]
  {Œ¶ : C ‚•§ C} (Œµ : ùü≠ C ‚ü∂ Œ¶)
  {J : Type u} [LinearOrder J] [IsWellOrder J (¬∑ < ¬∑)] [OrderBot J]

namespace Functor

namespace Iteration

variable {j : J} (F : { i | i ‚â§ j } ‚•§ C)

noncomputable abbrev mapSucc' (i : J) (hi : i < j) :
    F.obj ‚ü®i, hi.le‚ü© ‚ü∂ F.obj ‚ü®wellOrderSucc i, wellOrderSucc_le hi‚ü© :=
  F.map (homOfLE (by simpa only [Subtype.mk_le_mk] using self_le_wellOrderSucc i))

variable {i : J} (hi : i ‚â§ j)

def restrictionLT : { k | k < i } ‚•§ C :=
  (monotone_inclusion_lt_le_of_le hi).functor ‚ãô F

@[simp]
lemma restrictionLT_obj (k : J) (hk : k < i) :
    (restrictionLT F hi).obj ‚ü®k, hk‚ü© = F.obj ‚ü®k, hk.le.trans hi‚ü© := rfl

@[simp]
lemma restrictionLT_map {k‚ÇÅ k‚ÇÇ : { k | k < i }} (œÜ : k‚ÇÅ ‚ü∂ k‚ÇÇ) :
    (restrictionLT F hi).map œÜ = F.map (homOfLE (by simpa using leOfHom œÜ)) := rfl

@[simps]
def coconeOfLE :
    Cocone (restrictionLT F hi) where
  pt := F.obj ‚ü®i, hi‚ü©
  Œπ :=
    { app := fun ‚ü®k, hk‚ü© => F.map (homOfLE (by simpa using hk.le))
      naturality := fun ‚ü®k‚ÇÅ, hk‚ÇÅ‚ü© ‚ü®k‚ÇÇ, hk‚ÇÇ‚ü© _ => by
        dsimp
        rw [comp_id, ‚Üê Functor.map_comp, homOfLE_comp] }

def restrictionLE : { k | k ‚â§ i } ‚•§ C :=
  (monotone_inclusion_le_le_of_le hi).functor ‚ãô F

@[simp]
lemma restrictionLE_obj (k : J) (hk : k ‚â§ i) :
    (restrictionLE F hi).obj ‚ü®k, hk‚ü© = F.obj ‚ü®k, hk.trans hi‚ü© := rfl

@[simp]
lemma restrictionLE_map {k‚ÇÅ k‚ÇÇ : { k | k ‚â§ i }} (œÜ : k‚ÇÅ ‚ü∂ k‚ÇÇ) :
    (restrictionLE F hi).map œÜ = F.map (homOfLE (by simpa using leOfHom œÜ)) := rfl

end Iteration

structure Iteration (j : J) where
  F : { i | i ‚â§ j } ‚•§ C ‚•§ C
  isoZero : F.obj ‚ü®‚ä•, bot_le‚ü© ‚âÖ ùü≠ C
  isoSucc (i : J) (hi : i < j) :
    F.obj ‚ü®wellOrderSucc i, wellOrderSucc_le hi‚ü© ‚âÖ F.obj ‚ü®i, hi.le‚ü© ‚ãô Œ¶
  mapSucc'_eq (i : J) (hi : i < j) :
    Iteration.mapSucc' F i hi = whiskerLeft _ Œµ ‚â´ (isoSucc i hi).inv
  isColimit (i : J) [IsWellOrderLimitElement i] (hi : i ‚â§ j) :
    IsColimit (Iteration.coconeOfLE F hi)

namespace Iteration

variable {Œµ}
variable {j : J} (iter‚ÇÅ iter‚ÇÇ : Œ¶.Iteration Œµ j)

noncomputable abbrev mapSucc (i : J) (hi : i < j) :
    iter‚ÇÅ.F.obj ‚ü®i, hi.le‚ü© ‚ü∂ iter‚ÇÅ.F.obj ‚ü®wellOrderSucc i, wellOrderSucc_le hi‚ü© :=
  mapSucc' iter‚ÇÅ.F i hi

lemma mapSucc_eq (i : J) (hi : i < j) :
    iter‚ÇÅ.mapSucc i hi = whiskerLeft _ Œµ ‚â´ (iter‚ÇÅ.isoSucc i hi).inv :=
  iter‚ÇÅ.mapSucc'_eq _ hi

structure Hom where
  natTrans : iter‚ÇÅ.F ‚ü∂ iter‚ÇÇ.F
  natTrans_app_zero : natTrans.app ‚ü®‚ä•, bot_le‚ü© = iter‚ÇÅ.isoZero.hom ‚â´ iter‚ÇÇ.isoZero.inv := by aesop_cat
  natTrans_app_succ (i : J) (hi : i < j) :
    natTrans.app ‚ü®wellOrderSucc i, wellOrderSucc_le hi‚ü© = (iter‚ÇÅ.isoSucc i hi).hom ‚â´
      whiskerRight (natTrans.app ‚ü®i, hi.le‚ü©) _ ‚â´ (iter‚ÇÇ.isoSucc i hi).inv := by aesop_cat

namespace Hom

attribute [simp] natTrans_app_zero

@[simps]
def id : Hom iter‚ÇÅ iter‚ÇÅ where
  natTrans := ùüô _

variable {iter‚ÇÅ iter‚ÇÇ}

lemma ext' {f g : Hom iter‚ÇÅ iter‚ÇÇ} (h : f.natTrans = g.natTrans) : f = g := by
  cases f
  cases g
  subst h
  rfl

attribute [local ext] ext'

@[simps]
def comp {iter‚ÇÉ : Iteration Œµ j} (f : Hom iter‚ÇÅ iter‚ÇÇ) (g : Hom iter‚ÇÇ iter‚ÇÉ) : Hom iter‚ÇÅ iter‚ÇÉ where
  natTrans := f.natTrans ‚â´ g.natTrans
  natTrans_app_succ i hi := by simp [natTrans_app_succ _ _ hi]

instance : Category (Iteration Œµ j) where
  Hom := Hom
  id := id
  comp := comp

instance : Subsingleton (iter‚ÇÅ ‚ü∂ iter‚ÇÇ) where
  allEq f g := ext' (by
    let P := fun (i : J) => ‚àÄ (hi : i ‚â§ j), f.natTrans.app ‚ü®i, hi‚ü© = g.natTrans.app ‚ü®i, hi‚ü©
    suffices ‚àÄ (i : J), P i by
      ext ‚ü®i, hi‚ü© : 2
      apply this
    refine fun _ => WellFoundedLT.induction _ (fun i hi hi' => ?_)
    obtain rfl|‚ü®i, rfl, hi''‚ü©|_ := eq_bot_or_eq_succ_or_isWellOrderLimitElement i
    ¬∑ simp only [natTrans_app_zero]
    ¬∑ simp only [Hom.natTrans_app_succ _ i (lt_of_lt_of_le hi'' hi'), hi i hi'']
    ¬∑ exact (iter‚ÇÅ.isColimit i hi').hom_ext (fun ‚ü®k, hk‚ü© => by simp [hi k hk]))

end Hom

variable {iter‚ÇÅ iter‚ÇÇ} in
@[simp, reassoc]
lemma natTrans_comp {iter‚ÇÉ : Iteration Œµ j} (œÜ : iter‚ÇÅ ‚ü∂ iter‚ÇÇ) (œà : iter‚ÇÇ ‚ü∂ iter‚ÇÉ) :
    (œÜ ‚â´ œà).natTrans = œÜ.natTrans ‚â´ œà.natTrans := rfl

variable {iter‚ÇÅ iter‚ÇÇ} in
@[reassoc]
lemma natTrans_naturality (œÜ : iter‚ÇÅ ‚ü∂ iter‚ÇÇ) (i‚ÇÅ i‚ÇÇ : J) (h : i‚ÇÅ ‚â§ i‚ÇÇ) (h' : i‚ÇÇ ‚â§ j) :
    iter‚ÇÅ.F.map (by exact homOfLE h) ‚â´ œÜ.natTrans.app ‚ü®i‚ÇÇ, h'‚ü© =
      œÜ.natTrans.app ‚ü®i‚ÇÅ, h.trans h'‚ü© ‚â´ iter‚ÇÇ.F.map (by exact homOfLE h) := by
  apply œÜ.natTrans.naturality

variable (Œµ) in
@[simps]
def eval {i : J} (hi : i ‚â§ j) : Iteration Œµ j ‚•§ C ‚•§ C where
  obj iter := iter.F.obj ‚ü®i, hi‚ü©
  map œÜ := œÜ.natTrans.app _

@[simps F isoZero isoSucc]
def trunc {i : J} (hi : i ‚â§ j) : Iteration Œµ i where
  F := restrictionLE (iter‚ÇÅ.F) hi
  isoZero := iter‚ÇÅ.isoZero
  isoSucc k hk := iter‚ÇÅ.isoSucc k (lt_of_lt_of_le hk hi)
  mapSucc'_eq k hk := iter‚ÇÅ.mapSucc'_eq k (lt_of_lt_of_le hk hi)
  isColimit k _ hk := iter‚ÇÅ.isColimit k (hk.trans hi)

variable (Œµ) in
@[simps obj]
def truncFunctor {i : J} (hi : i ‚â§ j) : Iteration Œµ j ‚•§ Iteration Œµ i where
  obj iter := iter.trunc hi
  map {iter‚ÇÅ iter‚ÇÇ} œÜ :=
    { natTrans := whiskerLeft _ œÜ.natTrans
      natTrans_app_succ := fun k hk => œÜ.natTrans_app_succ k (lt_of_lt_of_le hk hi) }

variable {iter‚ÇÅ iter‚ÇÇ}

@[simp]
lemma truncFunctor_map_natTrans_app
    (œÜ : iter‚ÇÅ ‚ü∂ iter‚ÇÇ) {i : J} (hi : i ‚â§ j) (k : J) (hk : k ‚â§ i) :
    ((truncFunctor Œµ hi).map œÜ).natTrans.app ‚ü®k, hk‚ü© =
      œÜ.natTrans.app ‚ü®k, hk.trans hi‚ü© := rfl

namespace Hom

lemma congr_app (œÜ œÜ' : iter‚ÇÅ ‚ü∂ iter‚ÇÇ) (i : J) (hi : i ‚â§ j) :
    œÜ.natTrans.app ‚ü®i, hi‚ü© = œÜ'.natTrans.app ‚ü®i, hi‚ü© := by
  obtain rfl := Subsingleton.elim œÜ œÜ'
  rfl

def mkOfZero (iter‚ÇÅ iter‚ÇÇ : Iteration Œµ (‚ä• : J)) : iter‚ÇÅ ‚ü∂ iter‚ÇÇ where
  natTrans :=
    { app := fun ‚ü®i, hi‚ü© => eqToHom (by congr; simpa using hi) ‚â´ iter‚ÇÅ.isoZero.hom ‚â´
        iter‚ÇÇ.isoZero.inv ‚â´ eqToHom (by congr; symm; simpa using hi)
      naturality := fun ‚ü®i, hi‚ü© ‚ü®k, hk‚ü© _œÜ => by
        obtain rfl : i = ‚ä• := by simpa using hi
        obtain rfl : k = ‚ä• := by simpa using hk
        obtain rfl : _œÜ = ùüô _ := rfl
        simp }
  natTrans_app_succ i hi := by simp at hi

section

noncomputable def mkOfSuccNatTransApp {i : J} {iter‚ÇÅ iter‚ÇÇ : Iteration Œµ (wellOrderSucc i)}
    (hi : i < wellOrderSucc i)
    (œÜ : iter‚ÇÅ.trunc hi.le ‚ü∂ iter‚ÇÇ.trunc hi.le) (k : J) (hk : k ‚â§ wellOrderSucc i) :
    iter‚ÇÅ.F.obj ‚ü®k, hk‚ü© ‚ü∂ iter‚ÇÇ.F.obj ‚ü®k, hk‚ü© :=
  if hk' : k ‚â§ i then œÜ.natTrans.app ‚ü®k, hk'‚ü© else by
    obtain rfl : k = wellOrderSucc i := by
      obtain hk''|rfl := hk.lt_or_eq
      ¬∑ exfalso
        apply hk' (le_of_lt_wellOrderSucc hk'')
      ¬∑ rfl
    exact (iter‚ÇÅ.isoSucc i hi).hom ‚â´ whiskerRight (œÜ.natTrans.app ‚ü®i, by dsimp; rfl‚ü©) _ ‚â´ (iter‚ÇÇ.isoSucc i hi).inv

lemma mkOfSuccNatTransApp_eq_of_le {i : J} {iter‚ÇÅ iter‚ÇÇ : Iteration Œµ (wellOrderSucc i)}
    (hi : i < wellOrderSucc i)
    (œÜ : iter‚ÇÅ.trunc hi.le ‚ü∂ iter‚ÇÇ.trunc hi.le) (k : J) (hk : k ‚â§ i) :
    mkOfSuccNatTransApp hi œÜ k (hk.trans (self_le_wellOrderSucc i)) = œÜ.natTrans.app ‚ü®k, hk‚ü© :=
  dif_pos hk

@[simp]
lemma mkOfSuccNatTransApp_eq_succ {i : J} {iter‚ÇÅ iter‚ÇÇ : Iteration Œµ (wellOrderSucc i)}
    (hi : i < wellOrderSucc i)
    (œÜ : iter‚ÇÅ.trunc hi.le ‚ü∂ iter‚ÇÇ.trunc hi.le) :
    mkOfSuccNatTransApp hi œÜ (wellOrderSucc i) (by rfl) =
      (iter‚ÇÅ.isoSucc i hi).hom ‚â´ whiskerRight (œÜ.natTrans.app ‚ü®i, by dsimp; rfl‚ü©) _ ‚â´ (iter‚ÇÇ.isoSucc i hi).inv :=
  dif_neg (by aesop)

@[simps]
noncomputable def mkOfSuccNatTrans {i : J} {iter‚ÇÅ iter‚ÇÇ : Iteration Œµ (wellOrderSucc i)}
    (hi : i < wellOrderSucc i)
    (œÜ : iter‚ÇÅ.trunc hi.le ‚ü∂ iter‚ÇÇ.trunc hi.le) :
    iter‚ÇÅ.F ‚ü∂ iter‚ÇÇ.F where
  app := fun ‚ü®k, hk‚ü© => mkOfSuccNatTransApp hi œÜ k hk
  naturality := fun ‚ü®k‚ÇÅ, hk‚ÇÅ‚ü© ‚ü®k‚ÇÇ, hk‚ÇÇ‚ü© f => by
    dsimp at hk‚ÇÅ hk‚ÇÇ ‚ä¢
    have hk : k‚ÇÅ ‚â§ k‚ÇÇ := leOfHom f
    obtain h‚ÇÇ|rfl := hk‚ÇÇ.lt_or_eq
    ¬∑ replace h‚ÇÇ : k‚ÇÇ ‚â§ i := le_of_lt_wellOrderSucc h‚ÇÇ
      rw [mkOfSuccNatTransApp_eq_of_le hi œÜ k‚ÇÇ h‚ÇÇ,
        mkOfSuccNatTransApp_eq_of_le hi œÜ k‚ÇÅ (hk.trans h‚ÇÇ)]
      exact natTrans_naturality œÜ k‚ÇÅ k‚ÇÇ hk h‚ÇÇ
    ¬∑ obtain h‚ÇÅ|rfl := hk.lt_or_eq
      ¬∑ have h‚ÇÇ : k‚ÇÅ ‚â§ i := le_of_lt_wellOrderSucc h‚ÇÅ
        let f‚ÇÅ : (‚ü®k‚ÇÅ, hk‚ü© : { l | l ‚â§ wellOrderSucc i}) ‚ü∂
          ‚ü®i, self_le_wellOrderSucc i‚ü© := homOfLE h‚ÇÇ
        let f‚ÇÇ : (‚ü®i, self_le_wellOrderSucc i‚ü© : { l | l ‚â§ wellOrderSucc i}) ‚ü∂
          ‚ü®wellOrderSucc i, by dsimp; rfl‚ü© := homOfLE (self_le_wellOrderSucc i)
        obtain rfl : f = f‚ÇÅ ‚â´ f‚ÇÇ := rfl
        rw [Functor.map_comp, Functor.map_comp, assoc,
          mkOfSuccNatTransApp_eq_of_le hi œÜ k‚ÇÅ h‚ÇÇ]
        erw [‚Üê natTrans_naturality_assoc œÜ k‚ÇÅ i h‚ÇÇ (by rfl)]
        rw [mkOfSuccNatTransApp_eq_succ]
        dsimp
        change _ ‚â´ iter‚ÇÅ.mapSucc i hi ‚â´ _ = _ ‚â´ _ ‚â´ iter‚ÇÇ.mapSucc i hi
        rw [iter‚ÇÅ.mapSucc_eq i hi, iter‚ÇÇ.mapSucc_eq i hi, assoc,
          Iso.inv_hom_id_assoc]
        congr 1; simp only [‚Üê assoc]; congr 1
        ext X
        exact (Œµ.naturality _).symm
      ¬∑ obtain rfl : f = ùüô _ := rfl
        rw [Functor.map_id, Functor.map_id, id_comp, comp_id]

end

noncomputable def mkOfSucc {i : J} (iter‚ÇÅ iter‚ÇÇ : Iteration Œµ (wellOrderSucc i)) (hi : i < wellOrderSucc i)
    (œÜ : iter‚ÇÅ.trunc hi.le ‚ü∂ iter‚ÇÇ.trunc hi.le) :
    iter‚ÇÅ ‚ü∂ iter‚ÇÇ where
  natTrans := mkOfSuccNatTrans hi œÜ
  natTrans_app_zero := by
    dsimp
    rw [mkOfSuccNatTransApp_eq_of_le _ _ _ bot_le, œÜ.natTrans_app_zero]
    rfl
  natTrans_app_succ k hk := by
    obtain hk'|rfl := (le_of_lt_wellOrderSucc hk).lt_or_eq
    ¬∑ dsimp
      rw [mkOfSuccNatTransApp_eq_of_le hi œÜ k hk'.le,
        mkOfSuccNatTransApp_eq_of_le hi œÜ (wellOrderSucc k) (wellOrderSucc_le hk'),
        œÜ.natTrans_app_succ _ hk']
      rfl
    ¬∑ simp [mkOfSuccNatTransApp_eq_of_le hi œÜ k (by rfl)]

section

variable [IsWellOrderLimitElement j] (œÜ : ‚àÄ (i : J) (hi : i < j), iter‚ÇÅ.trunc hi.le ‚ü∂ iter‚ÇÇ.trunc hi.le)

def mkOfLimitNatTransApp (i : J) (hi : i ‚â§ j) : iter‚ÇÅ.F.obj ‚ü®i, hi‚ü© ‚ü∂ iter‚ÇÇ.F.obj ‚ü®i, hi‚ü© :=
  if h : i < j
    then
      (œÜ i h).natTrans.app ‚ü®i, by dsimp; rfl‚ü©
    else by
      obtain rfl : i = j := by
        obtain h'|rfl := hi.lt_or_eq
        ¬∑ exfalso
          exact h h'
        ¬∑ rfl
      exact (iter‚ÇÅ.isColimit i (show i ‚â§ i by rfl)).desc (Cocone.mk _
        { app := fun ‚ü®k, hk‚ü© => (œÜ k hk).natTrans.app ‚ü®k, by dsimp; rfl‚ü© ‚â´
            iter‚ÇÇ.F.map (homOfLE (by exact hk.le))
          naturality := fun ‚ü®k‚ÇÅ, hk‚ÇÅ‚ü© ‚ü®k‚ÇÇ, hk‚ÇÇ‚ü© f => by
            have hf : k‚ÇÅ ‚â§ k‚ÇÇ := by simpa using leOfHom f
            dsimp
            rw [comp_id, congr_app (œÜ k‚ÇÅ hk‚ÇÅ) ((truncFunctor Œµ hf).map (œÜ k‚ÇÇ hk‚ÇÇ))]
            erw [natTrans_naturality_assoc (œÜ k‚ÇÇ hk‚ÇÇ) k‚ÇÅ k‚ÇÇ hf (by rfl)]
            dsimp
            rw [‚Üê Functor.map_comp, homOfLE_comp] })

lemma mkOfLimitNatTransApp_eq_of_lt (i : J) (hi : i < j) :
    mkOfLimitNatTransApp œÜ i hi.le = (œÜ i hi).natTrans.app ‚ü®i, by dsimp; rfl‚ü© := dif_pos hi

lemma mkOfLimitNatTransApp_naturality_top (i : J) (hi : i < j) :
    iter‚ÇÅ.F.map (homOfLE (by simpa using hi.le) : ‚ü®i, hi.le‚ü© ‚ü∂ ‚ü®j, by dsimp; rfl‚ü©) ‚â´ mkOfLimitNatTransApp œÜ j (by rfl) =
      mkOfLimitNatTransApp œÜ i hi.le ‚â´ iter‚ÇÇ.F.map (homOfLE (by simpa using hi.le)) := by
  rw [mkOfLimitNatTransApp_eq_of_lt œÜ i hi]
  dsimp [mkOfLimitNatTransApp]
  rw [dif_neg (by simp)]
  exact (iter‚ÇÅ.isColimit j (by rfl)).fac _ ‚ü®i, hi‚ü©

@[simps]
def mkOfLimitNatTrans : iter‚ÇÅ.F ‚ü∂ iter‚ÇÇ.F where
  app := fun ‚ü®k, hk‚ü© => mkOfLimitNatTransApp œÜ k hk
  naturality := fun ‚ü®k‚ÇÅ, hk‚ÇÅ‚ü© ‚ü®k‚ÇÇ, hk‚ÇÇ‚ü© f => by
    dsimp at hk‚ÇÅ hk‚ÇÇ
    have hk : k‚ÇÅ ‚â§ k‚ÇÇ := leOfHom f
    obtain h‚ÇÇ|rfl := hk‚ÇÇ.lt_or_eq
    ¬∑ dsimp
      rw [mkOfLimitNatTransApp_eq_of_lt _ k‚ÇÇ h‚ÇÇ,
        mkOfLimitNatTransApp_eq_of_lt _ k‚ÇÅ (lt_of_le_of_lt hk h‚ÇÇ),
        congr_app (œÜ k‚ÇÅ (lt_of_le_of_lt hk h‚ÇÇ)) ((truncFunctor Œµ hk).map (œÜ k‚ÇÇ h‚ÇÇ))]
      exact natTrans_naturality (œÜ k‚ÇÇ h‚ÇÇ) k‚ÇÅ k‚ÇÇ hk (by rfl)
    ¬∑ obtain h‚ÇÅ|rfl := hk‚ÇÅ.lt_or_eq
      ¬∑ exact mkOfLimitNatTransApp_naturality_top _ _ h‚ÇÅ
      ¬∑ obtain rfl : f = ùüô _ := rfl
        dsimp
        simp only [map_id, id_comp, comp_id]

def mkOfLimit  :
    iter‚ÇÅ ‚ü∂ iter‚ÇÇ where
  natTrans := mkOfLimitNatTrans œÜ
  natTrans_app_zero := by simp [mkOfLimitNatTransApp_eq_of_lt œÜ ‚ä•
    (IsWellOrderLimitElement.bot_lt j)]
  natTrans_app_succ i h := by
    dsimp
    have h' := IsWellOrderLimitElement.wellOrderSucc_lt h
    rw [mkOfLimitNatTransApp_eq_of_lt œÜ _ h',
      (œÜ _ h').natTrans_app_succ i (self_lt_wellOrderSucc h),
      mkOfLimitNatTransApp_eq_of_lt œÜ _ h,
      congr_app (œÜ i h) ((truncFunctor Œµ (self_le_wellOrderSucc i)).map (œÜ (wellOrderSucc i) h'))]
    rfl

end

end Hom

variable (iter‚ÇÅ iter‚ÇÇ) in
lemma nonempty_hom : Nonempty (iter‚ÇÅ ‚ü∂ iter‚ÇÇ) := by
  let P := fun (i : J) => ‚àÄ (hi : i ‚â§ j),
    Nonempty ((truncFunctor Œµ hi).obj iter‚ÇÅ ‚ü∂ (truncFunctor Œµ hi).obj iter‚ÇÇ)
  suffices ‚àÄ i, P i from this j (by rfl)
  refine fun _ => WellFoundedLT.induction _ (fun i hi hi' => ?_)
  obtain rfl|‚ü®i, rfl, hi''‚ü©|_ := eq_bot_or_eq_succ_or_isWellOrderLimitElement i
  ¬∑ exact ‚ü®Hom.mkOfZero _ _‚ü©
  ¬∑ exact ‚ü®Hom.mkOfSucc _ _ hi'' ((hi i hi'' (hi''.le.trans hi')).some)‚ü©
  ¬∑ exact ‚ü®Hom.mkOfLimit (fun k hk => (hi k hk (hk.le.trans hi')).some)‚ü©

noncomputable instance : Unique (iter‚ÇÅ ‚ü∂ iter‚ÇÇ) :=
  uniqueOfSubsingleton (Nonempty.some (nonempty_hom _ _))

variable (iter‚ÇÅ iter‚ÇÇ)

noncomputable def iso : iter‚ÇÅ ‚âÖ iter‚ÇÇ where
  hom := default
  inv := default

@[simp]
lemma iso_refl : (iso iter‚ÇÅ iter‚ÇÅ) = Iso.refl _ := by
  ext
  apply Subsingleton.elim

lemma iso_trans (iter‚ÇÉ : Iteration Œµ j) :
    iso iter‚ÇÅ iter‚ÇÉ = iso iter‚ÇÅ iter‚ÇÇ ‚â™‚â´ iso iter‚ÇÇ iter‚ÇÉ := by
  ext
  apply Subsingleton.elim

variable (Œµ J) in
def mkOfBot : Iteration Œµ (‚ä• : J) where
  F := (Functor.const _).obj (ùü≠ C)
  isoZero := Iso.refl _
  isoSucc _ h := by simp at h
  mapSucc'_eq _ h := by simp at h
  isColimit x _ h := by
    exfalso
    exact (IsWellOrderLimitElement.neq_bot x) (by simpa using h)

section

variable {j : J} (F : { i | i ‚â§ j} ‚•§ C) (X : C)
    (œÑ : F.obj ‚ü®j, le_refl j‚ü© ‚ü∂ X) (hj : j < wellOrderSucc j)

def mkFunctorOfSuccObj (i : J) : C :=
  if h : i ‚â§ j then F.obj ‚ü®i, h‚ü© else X

def mkFunctorOfSuccObjIsoOfLE (i : J) (hi : i ‚â§ j) :
    mkFunctorOfSuccObj F X i ‚âÖ F.obj ‚ü®i, hi‚ü© := eqToIso (dif_pos hi)

noncomputable def mkFunctorOfSuccObjSuccIso :
    mkFunctorOfSuccObj F X (wellOrderSucc j) ‚âÖ X := eqToIso (dif_neg (by aesop))

variable {X}

noncomputable def mkFunctorOfSuccMap (i‚ÇÅ i‚ÇÇ : J) (hi : i‚ÇÅ ‚â§ i‚ÇÇ) (hi‚ÇÇ : i‚ÇÇ ‚â§ wellOrderSucc j):
    mkFunctorOfSuccObj F X i‚ÇÅ ‚ü∂ mkFunctorOfSuccObj F X i‚ÇÇ :=
  if h‚ÇÇ : i‚ÇÇ ‚â§ j then
    (mkFunctorOfSuccObjIsoOfLE F X i‚ÇÅ (hi.trans h‚ÇÇ)).hom ‚â´
      F.map (homOfLE (by exact hi)) ‚â´ (mkFunctorOfSuccObjIsoOfLE F X i‚ÇÇ h‚ÇÇ).inv
  else
    if h‚ÇÅ : i‚ÇÅ ‚â§ j then
      (mkFunctorOfSuccObjIsoOfLE F X i‚ÇÅ h‚ÇÅ).hom ‚â´ F.map (homOfLE (by exact h‚ÇÅ)) ‚â´ œÑ ‚â´
        (mkFunctorOfSuccObjSuccIso F X hj).inv ‚â´
        eqToHom (by rw [le_antisymm hi‚ÇÇ (wellOrderSucc_le (not_le.1 h‚ÇÇ))])
    else
      eqToHom (by rw [le_antisymm hi (hi‚ÇÇ.trans (wellOrderSucc_le (not_le.1 h‚ÇÅ)))])

lemma mkFunctorOfSuccMap_eq_of_le‚ÇÇ (i‚ÇÅ i‚ÇÇ : J) (hi : i‚ÇÅ ‚â§ i‚ÇÇ) (hi‚ÇÇ : i‚ÇÇ ‚â§ j) :
    mkFunctorOfSuccMap F œÑ hj i‚ÇÅ i‚ÇÇ hi (hi‚ÇÇ.trans (self_le_wellOrderSucc j)) =
      (mkFunctorOfSuccObjIsoOfLE F X i‚ÇÅ (hi.trans hi‚ÇÇ)).hom ‚â´
        F.map (homOfLE (by exact hi)) ‚â´ (mkFunctorOfSuccObjIsoOfLE F X i‚ÇÇ hi‚ÇÇ).inv :=
  dif_pos hi‚ÇÇ

@[simp]
lemma mkFunctorOfSuccMap_id (i : J) (hi : i ‚â§ wellOrderSucc j) :
    mkFunctorOfSuccMap F œÑ hj i i (le_refl i) hi = ùüô _ := by
  by_cases hi' : i ‚â§ j
  ¬∑ rw [mkFunctorOfSuccMap_eq_of_le‚ÇÇ F œÑ hj i i (by rfl) (hi')]
    erw [Functor.map_id]
    rw [id_comp, Iso.hom_inv_id]
  ¬∑ dsimp [mkFunctorOfSuccMap]
    rw [dif_neg hi', dif_neg hi']

lemma mkFunctorOfSuccMap_comp (i‚ÇÅ i‚ÇÇ i‚ÇÉ : J) (h‚ÇÅ : i‚ÇÅ ‚â§ i‚ÇÇ) (h‚ÇÇ : i‚ÇÇ ‚â§ i‚ÇÉ) (h‚ÇÉ : i‚ÇÉ ‚â§ wellOrderSucc j) :
    mkFunctorOfSuccMap F œÑ hj i‚ÇÅ i‚ÇÉ (h‚ÇÅ.trans h‚ÇÇ) h‚ÇÉ =
      mkFunctorOfSuccMap F œÑ hj i‚ÇÅ i‚ÇÇ h‚ÇÅ (h‚ÇÇ.trans h‚ÇÉ) ‚â´ mkFunctorOfSuccMap F œÑ hj i‚ÇÇ i‚ÇÉ h‚ÇÇ h‚ÇÉ := by
  obtain h‚ÇÑ|rfl := h‚ÇÉ.lt_or_eq
  ¬∑ replace h‚ÇÑ : i‚ÇÉ ‚â§ j := le_of_lt_wellOrderSucc h‚ÇÑ
    rw [mkFunctorOfSuccMap_eq_of_le‚ÇÇ F œÑ hj i‚ÇÅ i‚ÇÇ _ (h‚ÇÇ.trans h‚ÇÑ),
      mkFunctorOfSuccMap_eq_of_le‚ÇÇ F œÑ hj i‚ÇÇ i‚ÇÉ _ h‚ÇÑ,
      mkFunctorOfSuccMap_eq_of_le‚ÇÇ F œÑ hj i‚ÇÅ i‚ÇÉ _ h‚ÇÑ]
    dsimp
    rw [assoc, assoc, Iso.inv_hom_id_assoc, ‚Üê Functor.map_comp_assoc,
      homOfLE_comp]
  ¬∑ obtain h‚ÇÑ|rfl := h‚ÇÇ.lt_or_eq
    ¬∑ replace h‚ÇÑ : i‚ÇÇ ‚â§ j := le_of_lt_wellOrderSucc h‚ÇÑ
      rw [mkFunctorOfSuccMap_eq_of_le‚ÇÇ F œÑ hj i‚ÇÅ i‚ÇÇ _ h‚ÇÑ]
      dsimp [mkFunctorOfSuccMap]
      rw [dif_neg (by aesop), dif_pos (h‚ÇÅ.trans h‚ÇÑ), dif_neg (by aesop), dif_pos h‚ÇÑ,
        comp_id, assoc, assoc, Iso.inv_hom_id_assoc, ‚Üê Functor.map_comp_assoc, homOfLE_comp]
    ¬∑ rw [mkFunctorOfSuccMap_id, comp_id]

@[simps obj]
noncomputable def mkFunctorOfSucc : { i | i ‚â§ wellOrderSucc j } ‚•§ C where
  obj i := mkFunctorOfSuccObj F X i
  map := @fun ‚ü®i‚ÇÅ, h‚ÇÅ‚ü© ‚ü®i‚ÇÇ, h‚ÇÇ‚ü© œÜ => mkFunctorOfSuccMap F œÑ hj i‚ÇÅ i‚ÇÇ (by simpa using leOfHom œÜ) h‚ÇÇ
  map_comp := by
    rintro ‚ü®i‚ÇÅ, h‚ÇÅ‚ü© ‚ü®i‚ÇÇ, h‚ÇÇ‚ü© ‚ü®i‚ÇÉ, h‚ÇÉ‚ü© _ _
    exact mkFunctorOfSuccMap_comp F œÑ hj i‚ÇÅ i‚ÇÇ i‚ÇÉ _ _ h‚ÇÉ

@[simp]
lemma mapSucc'_mkFunctorOfSucc :
    mapSucc' (mkFunctorOfSucc F œÑ hj) j hj =
      (mkFunctorOfSuccObjIsoOfLE F X j (le_refl j)).hom ‚â´ œÑ ‚â´ (mkFunctorOfSuccObjSuccIso F X hj).inv := by
  dsimp [mapSucc', mkFunctorOfSucc, mkFunctorOfSuccMap]
  rw [dif_neg (by aesop), dif_pos (le_refl j)]
  erw [Functor.map_id]
  simp

lemma mapSucc'_mkFunctorOfSucc_of_lt (i : J) (hi : i < j) :
    mapSucc' (mkFunctorOfSucc F œÑ hj) i (hi.trans hj) = (mkFunctorOfSuccObjIsoOfLE F X i hi.le).hom ‚â´
      F.map (homOfLE (by exact self_le_wellOrderSucc i)) ‚â´
        (mkFunctorOfSuccObjIsoOfLE F X (wellOrderSucc i) (wellOrderSucc_le hi)).inv := by
  apply mkFunctorOfSuccMap_eq_of_le‚ÇÇ

noncomputable def restrictionLEMkFunctorOfSuccIso :
    restrictionLE (mkFunctorOfSucc F œÑ hj) (self_le_wellOrderSucc j) ‚âÖ F :=
  NatIso.ofComponents (fun ‚ü®i, hi‚ü© => mkFunctorOfSuccObjIsoOfLE _ _ _ _) (by
    rintro ‚ü®i‚ÇÅ, hi‚ÇÅ‚ü© ‚ü®i‚ÇÇ, hi‚ÇÇ‚ü© f
    dsimp [mkFunctorOfSucc]
    rw [mkFunctorOfSuccMap_eq_of_le‚ÇÇ _ _ _ _ _ _ hi‚ÇÇ, assoc, assoc, Iso.inv_hom_id, comp_id]
    rfl)

noncomputable def restrictionLTMkFunctorOfSucc (i : J) (h : i ‚â§ j) :
    restrictionLT (mkFunctorOfSucc F œÑ hj) (h.trans (self_le_wellOrderSucc j)) ‚âÖ
      restrictionLT F h :=
  isoWhiskerLeft (monotone_inclusion_lt_le_of_le h).functor
    (restrictionLEMkFunctorOfSuccIso F œÑ hj)

end

noncomputable def mkOfSucc (j : J) (hj : j < wellOrderSucc j) (iter : Iteration Œµ j) :
    Iteration Œµ (wellOrderSucc j) where
  F := mkFunctorOfSucc iter.F (whiskerLeft _ Œµ) hj
  isoZero := mkFunctorOfSuccObjIsoOfLE _ _ _ _ ‚â™‚â´ iter.isoZero
  isoSucc i hi :=
    if h : i < j then mkFunctorOfSuccObjIsoOfLE _ _ _ _ ‚â™‚â´ iter.isoSucc i h ‚â™‚â´
      isoWhiskerRight ((mkFunctorOfSuccObjIsoOfLE _ _ _ _).symm) Œ¶
    else by
      obtain rfl : j = i := le_antisymm (not_lt.1 h) (le_of_lt_wellOrderSucc hi)
      exact mkFunctorOfSuccObjSuccIso _ _ hj ‚â™‚â´
        isoWhiskerRight ((mkFunctorOfSuccObjIsoOfLE iter.F (iter.F.obj ‚ü®j, le_refl j‚ü© ‚ãô Œ¶) j (le_refl j)).symm) _
  mapSucc'_eq i hi := by
    dsimp
    split_ifs with h
    ¬∑ rw [mapSucc'_mkFunctorOfSucc_of_lt _ _ _ _ h]
      ext X
      dsimp
      rw [assoc]
      erw [‚Üê Œµ.naturality_assoc, congr_app (iter.mapSucc_eq i h) X, assoc]
      rfl
    ¬∑ obtain rfl : j = i := le_antisymm (not_lt.1 h) (le_of_lt_wellOrderSucc hi)
      dsimp
      simp
      ext X
      apply Œµ.naturality
  isColimit i _ hi := by
    have hi' : i ‚â§ j := by
      obtain hi''|rfl := hi.lt_or_eq
      ¬∑ exact le_of_lt_wellOrderSucc hi''
      ¬∑ exfalso
        exact IsWellOrderLimitElement.neq_succ j hj
    apply (IsColimit.precomposeHomEquiv (restrictionLTMkFunctorOfSucc iter.F
      (whiskerLeft _ Œµ) hj i hi').symm _).1
    refine' IsColimit.ofIsoColimit (iter.isColimit i hi')
      (Cocones.ext (mkFunctorOfSuccObjIsoOfLE _ _ _ _).symm (fun ‚ü®k, hk‚ü© => _))
    dsimp [restrictionLTMkFunctorOfSucc, restrictionLEMkFunctorOfSuccIso,
      mkFunctorOfSucc]
    rw [mkFunctorOfSuccMap_eq_of_le‚ÇÇ _ _ _ _ _ _ hi', Iso.inv_hom_id_assoc]

section

variable (F : { i | i < j } ‚•§ C) (c : Cocone F)

def mkFunctorOfCoconeObj (i : J) : C :=
  if h : i < j then F.obj ‚ü®i, h‚ü© else c.pt

def mkFunctorOfCoconeObjIso (i : J) (hi : i < j) :
    mkFunctorOfCoconeObj F c i ‚âÖ F.obj ‚ü®i, hi‚ü© := eqToIso (dif_pos hi)

def mkFunctorOfCoconeObjTopIso :
    mkFunctorOfCoconeObj F c j ‚âÖ c.pt := eqToIso (dif_neg (by aesop))

def mkFunctorOfCoconeMap (i‚ÇÅ i‚ÇÇ : J) (h‚ÇÅ : i‚ÇÅ ‚â§ i‚ÇÇ) (h‚ÇÇ : i‚ÇÇ ‚â§ j) :
    mkFunctorOfCoconeObj F c i‚ÇÅ ‚ü∂ mkFunctorOfCoconeObj F c i‚ÇÇ :=
  if h‚ÇÉ : i‚ÇÇ < j then
    (mkFunctorOfCoconeObjIso F c i‚ÇÅ (lt_of_le_of_lt h‚ÇÅ h‚ÇÉ)).hom ‚â´ F.map (homOfLE (by exact h‚ÇÅ)) ‚â´ (mkFunctorOfCoconeObjIso F c i‚ÇÇ h‚ÇÉ).inv
  else
    if h‚ÇÑ : i‚ÇÅ < j then
      (mkFunctorOfCoconeObjIso F c i‚ÇÅ h‚ÇÑ).hom ‚â´ c.Œπ.app _ ‚â´
        (mkFunctorOfCoconeObjTopIso F c).inv ‚â´ eqToHom (by
          rw [le_antisymm h‚ÇÇ (by simpa using h‚ÇÉ)])
    else
      eqToHom (by rw [le_antisymm h‚ÇÅ (h‚ÇÇ.trans (by simpa using h‚ÇÑ))])

@[simp]
lemma mkFunctorOfCoconeMap_id (i : J) (h : i ‚â§ j) :
    mkFunctorOfCoconeMap F c i i (le_refl i) h = ùüô _ := by
  dsimp [mkFunctorOfCoconeMap]
  split_ifs with h'
  ¬∑ erw [Functor.map_id, id_comp, Iso.hom_inv_id]
  ¬∑ rfl

lemma mkFunctorOfCoconeMap_of_lt (i‚ÇÅ i‚ÇÇ : J) (h‚ÇÅ : i‚ÇÅ ‚â§ i‚ÇÇ) (h‚ÇÇ : i‚ÇÇ < j) :
    mkFunctorOfCoconeMap F c i‚ÇÅ i‚ÇÇ h‚ÇÅ h‚ÇÇ.le =
      (mkFunctorOfCoconeObjIso F c i‚ÇÅ (lt_of_le_of_lt h‚ÇÅ h‚ÇÇ)).hom ‚â´
        F.map (homOfLE (by exact h‚ÇÅ)) ‚â´
        (mkFunctorOfCoconeObjIso F c i‚ÇÇ h‚ÇÇ).inv := dif_pos h‚ÇÇ

lemma mkFunctorOfCoconeMap_of_lt_top (i : J) (hi : i < j) :
    mkFunctorOfCoconeMap F c i j hi.le (le_refl j) =
      (mkFunctorOfCoconeObjIso F c i hi).hom ‚â´ c.Œπ.app _ ‚â´
        (mkFunctorOfCoconeObjTopIso F c).inv := by
  dsimp [mkFunctorOfCoconeMap]
  rw [dif_pos hi, dif_neg (by simp), comp_id]

lemma mkFunctorOfCoconeMap_comp (i‚ÇÅ i‚ÇÇ i‚ÇÉ : J) (h‚ÇÅ : i‚ÇÅ ‚â§ i‚ÇÇ) (h‚ÇÇ : i‚ÇÇ ‚â§ i‚ÇÉ) (h‚ÇÉ : i‚ÇÉ ‚â§ j) :
    mkFunctorOfCoconeMap F c i‚ÇÅ i‚ÇÉ (h‚ÇÅ.trans h‚ÇÇ) h‚ÇÉ =
      mkFunctorOfCoconeMap F c i‚ÇÅ i‚ÇÇ h‚ÇÅ (h‚ÇÇ.trans h‚ÇÉ) ‚â´
        mkFunctorOfCoconeMap F c i‚ÇÇ i‚ÇÉ h‚ÇÇ h‚ÇÉ := by
  clear iter‚ÇÅ iter‚ÇÇ
  obtain h‚ÇÑ|rfl := h‚ÇÉ.lt_or_eq
  ¬∑ rw [mkFunctorOfCoconeMap_of_lt F c i‚ÇÅ i‚ÇÉ _ h‚ÇÑ,
      mkFunctorOfCoconeMap_of_lt F c i‚ÇÇ i‚ÇÉ _ h‚ÇÑ,
      mkFunctorOfCoconeMap_of_lt F c i‚ÇÅ i‚ÇÇ _ (lt_of_le_of_lt h‚ÇÇ h‚ÇÑ),
      assoc, assoc, Iso.inv_hom_id_assoc, ‚Üê Functor.map_comp_assoc,
      homOfLE_comp]
  ¬∑ obtain h‚ÇÑ|rfl := h‚ÇÇ.lt_or_eq
    ¬∑ rw [mkFunctorOfCoconeMap_of_lt_top F c i‚ÇÇ h‚ÇÑ,
        mkFunctorOfCoconeMap_of_lt_top F c i‚ÇÅ (lt_of_le_of_lt h‚ÇÅ h‚ÇÑ),
        mkFunctorOfCoconeMap_of_lt F c i‚ÇÅ i‚ÇÇ _ h‚ÇÑ,
        assoc, assoc, Iso.inv_hom_id_assoc, Cocone.w_assoc]
    ¬∑ simp

@[simps! obj map]
def mkFunctorOfCocone : { i | i ‚â§ j } ‚•§ C where
  obj := fun ‚ü®i, _‚ü© => mkFunctorOfCoconeObj F c i
  map := @fun ‚ü®i‚ÇÅ, h‚ÇÅ‚ü© ‚ü®i‚ÇÇ, h‚ÇÇ‚ü© œÜ => mkFunctorOfCoconeMap F c i‚ÇÅ i‚ÇÇ (leOfHom œÜ) h‚ÇÇ
  map_comp := by
    rintro ‚ü®i‚ÇÅ, h‚ÇÅ‚ü© ‚ü®i‚ÇÇ, h‚ÇÇ‚ü© ‚ü®i‚ÇÉ, h‚ÇÉ‚ü© f g
    exact mkFunctorOfCoconeMap_comp F c i‚ÇÅ i‚ÇÇ i‚ÇÉ _ _ h‚ÇÉ

end

variable (j)
variable [IsWellOrderLimitElement j] (iter : ‚àÄ (i : J) (_ : i < j), Iteration Œµ i)

@[simps]
noncomputable def mkOfLimitFunctor : {i | i < j} ‚•§ C ‚•§ C where
  obj := fun ‚ü®i, hi‚ü© => (iter i hi).F.obj ‚ü®i, le_refl _‚ü©
  map := @fun ‚ü®i‚ÇÅ, h‚ÇÅ‚ü© ‚ü®i‚ÇÇ, h‚ÇÇ‚ü© œÜ => (eval Œµ (le_refl i‚ÇÅ)).map (iso (iter i‚ÇÅ h‚ÇÅ) ((iter i‚ÇÇ h‚ÇÇ).trunc (leOfHom œÜ : i‚ÇÅ ‚â§ i‚ÇÇ))).hom ‚â´
    (iter i‚ÇÇ h‚ÇÇ).F.map (homOfLE (by exact leOfHom œÜ))
  map_id := fun ‚ü®i, h‚ü© => by
    dsimp
    erw [Functor.map_id, comp_id, iso_refl]
    rfl
  map_comp := by
    rintro ‚ü®i‚ÇÅ, h‚ÇÅ‚ü© ‚ü®i‚ÇÇ, h‚ÇÇ‚ü© ‚ü®i‚ÇÉ, h‚ÇÉ‚ü© f g
    have hf : i‚ÇÅ ‚â§ i‚ÇÇ := leOfHom f
    have hg : i‚ÇÇ ‚â§ i‚ÇÉ := leOfHom g
    dsimp
    rw [assoc, NatTrans.naturality_assoc,
      iso_trans (iter i‚ÇÅ h‚ÇÅ) (trunc (iter i‚ÇÇ h‚ÇÇ) (leOfHom f)) (trunc (iter i‚ÇÉ h‚ÇÉ) _)]
    dsimp
    rw [assoc, ‚Üê Functor.map_comp, Subsingleton.elim
      (iso (trunc (iter i‚ÇÇ h‚ÇÇ) hf) (trunc (iter i‚ÇÉ h‚ÇÉ) (hf.trans hg))).hom
      ((truncFunctor Œµ hf).map ((iso (iter i‚ÇÇ h‚ÇÇ) (trunc (iter i‚ÇÉ h‚ÇÉ) (leOfHom g))).hom))]
    rfl

noncomputable def mkOfLimit [HasColimit (mkOfLimitFunctor j iter)] :
    Iteration Œµ j where
  F := mkFunctorOfCocone (mkOfLimitFunctor j iter) (colimit.cocone _)
  isoZero := mkFunctorOfCoconeObjIso _ _ _ _ ‚â™‚â´ (iter ‚ä• (IsWellOrderLimitElement.bot_lt j)).isoZero
  isoSucc i hi := by
    refine' mkFunctorOfCoconeObjIso _ _ _ (IsWellOrderLimitElement.wellOrderSucc_lt hi) ‚â™‚â´
      (iter (wellOrderSucc i) _).isoSucc i (self_lt_wellOrderSucc hi) ‚â™‚â´
      isoWhiskerRight (?_ ‚â™‚â´ (mkFunctorOfCoconeObjIso _ _ _ hi).symm) Œ¶
    exact (eval Œµ (le_refl i)).mapIso (iso (iter i hi) ((iter (wellOrderSucc i) (IsWellOrderLimitElement.wellOrderSucc_lt hi)).trunc (self_le_wellOrderSucc i))).symm
  mapSucc'_eq i hi := by
    have hi' := (IsWellOrderLimitElement.wellOrderSucc_lt hi)
    have hi'' := self_lt_wellOrderSucc hi
    have h := (iter (wellOrderSucc i) hi').mapSucc_eq _ hi''
    dsimp [mapSucc', mapSucc] at h ‚ä¢
    rw [mkFunctorOfCoconeMap_of_lt _ _ _ _ _ hi']
    dsimp
    simp only [assoc, whiskerRight_comp, h]
    ext X
    dsimp
    erw [Œµ.naturality_assoc, Œµ.naturality_assoc]
  isColimit := sorry

end Iteration

section

variable (C J)

class HasIterationOfShape : Prop where
  hasColimitsOfShape_of_limit (j : J) [IsWellOrderLimitElement j] :
    HasColimitsOfShape { i | i < j } C := by infer_instance
  hasColimitsOfShape : HasColimitsOfShape J C := by infer_instance

instance [HasColimitsOfSize.{u, u} C] : HasIterationOfShape C J where

variable [HasIterationOfShape C J]

instance : HasColimitsOfShape J C := HasIterationOfShape.hasColimitsOfShape

variable {C}

instance hasColimitsOfShape_of_hasIterationOfShape (j : J) [IsWellOrderLimitElement j] :
    HasColimitsOfShape { i | i < j } C := HasIterationOfShape.hasColimitsOfShape_of_limit _

end

variable (C J) in
def nonempty_iteration [HasIterationOfShape C J] (j : J) : Nonempty (Iteration Œµ j) := by
  refine' WellFoundedLT.induction (C := fun i => Nonempty (Iteration Œµ i)) j (fun j hj => _)
  obtain rfl|‚ü®i, rfl, hi‚ü©|_ := eq_bot_or_eq_succ_or_isWellOrderLimitElement j
  ¬∑ exact ‚ü®Iteration.mkOfBot Œµ J‚ü©
  ¬∑ exact ‚ü®Iteration.mkOfSucc i hi (hj i hi).some‚ü©
  ¬∑ exact ‚ü®Iteration.mkOfLimit _ (fun i hi => (hj i hi).some)‚ü©

end Functor

end CategoryTheory
