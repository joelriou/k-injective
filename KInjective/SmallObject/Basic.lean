import KInjective.SmallObject.Lifting
import KInjective.SmallObject.Iteration
import KInjective.SmallObject.Pushouts

universe w v u

namespace CategoryTheory

namespace Limits

section

variable {J : Type*} [Category J] {F : J ‚•§ Type u}
    {c : Cocone F} (hc : IsColimit c)

namespace IsColimit

namespace JointlySurjective

variable (c) in
@[simps]
def cocone : Cocone F where
  pt :=  { x : c.pt // ‚àÉ (j : J) (y : F.obj j), x = c.Œπ.app j y }
  Œπ :=
    { app := fun j y => ‚ü®_, j, y, rfl‚ü©
      naturality := fun j‚ÇÅ j‚ÇÇ œÜ => by
        ext y
        dsimp
        rw [Subtype.mk.injEq]
        exact congr_fun (c.Œπ.naturality œÜ) y }

def isColimit : IsColimit (cocone c) where
  desc s x := hc.desc s x.1
  fac s j := by
    ext x
    exact congr_fun (hc.fac s j) x
  uniq s m hm := by
    ext ‚ü®x, hx‚ü©
    obtain ‚ü®j, y, rfl‚ü© := hx
    exact (congr_fun (hm j) y).trans (congr_fun (hc.fac s j).symm y)

def coconePointIso : (cocone c).pt ‚âÖ c.pt := coconePointUniqueUpToIso (isColimit hc) hc

@[simp]
lemma coconePointIso_hom_apply (x : (cocone c).pt) :
    (coconePointIso hc).hom x = x.1 := by
  obtain ‚ü®_, j, y, rfl‚ü© := x
  exact congr_fun (hc.fac c j) y

end JointlySurjective

lemma jointly_surjective (x : c.pt) :
    ‚àÉ (j : J) (y : F.obj j), x = c.Œπ.app j y := by
  obtain ‚ü®‚ü®_, j, y, rfl‚ü©, rfl‚ü© := (JointlySurjective.coconePointIso hc).toEquiv.surjective x
  exact ‚ü®j, y, by simp‚ü©

end IsColimit

end

namespace IsColimit

variable {J C : Type*} [Category J] [Category C] {F : J ‚•§ C} (c : Cocone F) (hc : IsColimit c)
  {X : C} (f : X ‚ü∂ c.pt) [PreservesColimitsOfShape J (coyoneda.obj (Opposite.op X))]

lemma fac_of_preservesColimitsOfShape_coyoneda_obj :
    ‚àÉ (j : J) (g : X ‚ü∂ F.obj j), f = g ‚â´ c.Œπ.app j := by
  obtain ‚ü®j, y, rfl‚ü© := (isColimitOfPreserves (coyoneda.obj (Opposite.op X)) hc).jointly_surjective f
  exact ‚ü®j, y, rfl‚ü©

end IsColimit

end Limits

open Limits

variable {C : Type*} [Category.{v} C] {I : Type w} {A B : I ‚Üí C} (f : ‚àÄ i, A i ‚ü∂ B i)

namespace MorphismProperty

inductive ofHoms : MorphismProperty C
  | mk (i : I) : ofHoms (f i)

lemma ofHoms.mk_mem (i : I) : (ofHoms f) (f i) := ofHoms.mk i

end MorphismProperty

namespace SmallObject

variable (J : Type*) [LinearOrder J] [IsWellOrder J (¬∑ < ¬∑)] [OrderBot J]
  [‚àÄ i, PreservesColimitsOfShape J (yoneda.obj (A i))]
  [‚àÄ {X Y: C} (œÄX : X ‚ü∂ Y), HasColimitsOfShape (Discrete (FunctorObjIndex f œÄX)) C] [HasPushouts C]
  [‚àÄ (Y : C), Functor.HasIterationOfShape (Over Y) J]

variable {X : C} (Y : C)

noncomputable def iter : Over Y ‚•§ Over Y := (functor f Y).iter (Œµ f Y) J

noncomputable def ŒπIter : ùü≠ _ ‚ü∂ iter f J Y :=
  ((functor f Y).iterationFunctorBotIso (Œµ f Y) J).inv ‚â´ ((functor f Y).iterationFunctorCocone (Œµ f Y) J).Œπ.app ‚ä•

variable {Y}
variable (g : X ‚ü∂ Y)

noncomputable def R : C := ((iter f J Y).obj (Over.mk g)).left

noncomputable def Œπ : X ‚ü∂ R f J g := ((ŒπIter f J Y).app (Over.mk g)).left

noncomputable def œÄ : R f J g ‚ü∂ Y := ((iter f J Y).obj (Over.mk g)).hom

@[reassoc (attr := simp)]
lemma fac : Œπ f J g ‚â´ œÄ f J g = g := Over.w ((ŒπIter f J Y).app (Over.mk g))

instance (i : I) : HasLiftingProperty (f i) (œÄ f J g) := sorry

lemma Œπ_mem_rlpWith_llpWith :
    (MorphismProperty.ofHoms f).rlpWith.llpWith (Œπ f J g) := sorry

lemma mem_rlpWith_llpWith_iff :
    (MorphismProperty.ofHoms f).rlpWith.llpWith g ‚Üî
      ‚àÉ (s : Y ‚ü∂ R f J g), s ‚â´ œÄ f J g = ùüô Y := sorry

end SmallObject

end CategoryTheory
